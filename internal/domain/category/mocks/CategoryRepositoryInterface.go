// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "github.com/sankangkin/di-rest-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepositoryInterface is an autogenerated mock type for the CategoryRepositoryInterface type
type CategoryRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *CategoryRepositoryInterface) Create(_a0 *models.Category) (*models.Category, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Category) (*models.Category, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*models.Category) *models.Category); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Category) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *CategoryRepositoryInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *CategoryRepositoryInterface) GetAll() ([]models.Category, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CategoryRepositoryInterface) GetById(id uint) (*models.Category, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Category, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *CategoryRepositoryInterface) Update(_a0 *models.Category) (*models.Category, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Category) (*models.Category, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*models.Category) *models.Category); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Category) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryRepositoryInterface creates a new instance of CategoryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepositoryInterface {
	mock := &CategoryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
