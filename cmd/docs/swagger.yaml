definitions:
  dto.UpdateCategoryRequestDTO:
    properties:
      categoryName:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Category:
    properties:
      categoryName:
        minLength: 3
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    required:
    - categoryName
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Customer:
    properties:
      address:
        minLength: 3
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        minLength: 3
        type: string
      phone:
        minLength: 3
        type: string
      updatedAt:
        type: string
    required:
    - address
    - name
    - phone
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Inventory:
    properties:
      createdAt:
        type: string
      createdTime:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      inQty:
        type: integer
      outQty:
        type: integer
      product:
        $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
      productId:
        type: string
      remark:
        type: string
      updatedAt:
        type: string
      updatedTime:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.ItemTransaction:
    properties:
      createdAt:
        type: string
      createdTime:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        description: TODO to enhance with UUID
        type: integer
      inQty:
        type: integer
      outQty:
        type: integer
      productId:
        type: string
      referenceNo:
        type: string
      remark:
        type: string
      tranType:
        type: string
      uom:
        type: string
      updatedAt:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Product:
    properties:
      brand:
        type: string
      buyPrice:
        minimum: 1
        type: integer
      categoryId:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      isActive:
        type: boolean
      productName:
        minLength: 3
        type: string
      sellPricelvl1:
        minimum: 1
        type: integer
      sellPricelvl2:
        minimum: 1
        type: integer
      uom:
        minLength: 3
        type: string
      uomId:
        minimum: 3
        type: integer
      updatedAt:
        type: string
    required:
    - buyPrice
    - productName
    - sellPricelvl1
    - sellPricelvl2
    - uom
    - uomId
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Purchase:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      discount:
        type: integer
      grandTotal:
        type: integer
      id:
        type: string
      purchaseDate:
        type: string
      purchaseDetails:
        items:
          $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.PurchaseDetail'
        type: array
      remark:
        type: string
      supplier:
        $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Supplier'
      supplierId:
        type: integer
      total:
        type: integer
      updatedAt:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.PurchaseDetail:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      price:
        type: integer
      productId:
        type: string
      productName:
        type: string
      purchaseId:
        type: string
      qty:
        type: integer
      total:
        type: integer
      uom:
        type: string
      updatedAt:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - ADMIN
    - USER
  github_com_sankangkin_di-rest-api_internal_models.Sale:
    properties:
      createdAt:
        type: string
      customer:
        $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Customer'
      customerId:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      discount:
        type: integer
      grandTotal:
        type: integer
      id:
        type: string
      remark:
        type: string
      saleDate:
        type: string
      saleDetails:
        items:
          $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.SaleDetail'
        type: array
      total:
        type: integer
      updatedAt:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.SaleDetail:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      derivedQty:
        type: integer
      id:
        type: integer
      price:
        type: integer
      productId:
        type: string
      productName:
        type: string
      qty:
        type: integer
      saleId:
        type: string
      total:
        type: integer
      uom:
        type: string
      updatedAt:
        type: string
    type: object
  github_com_sankangkin_di-rest-api_internal_models.Supplier:
    properties:
      address:
        minLength: 3
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        minLength: 3
        type: string
      phone:
        minLength: 3
        type: string
      updatedAt:
        type: string
    required:
    - address
    - name
    - phone
    type: object
  github_com_sankangkin_di-rest-api_internal_models.UnitConversion:
    properties:
      baseUnit:
        type: string
      baseUnitId:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      deriveUnit:
        type: string
      deriveUnitId:
        type: integer
      factor:
        minimum: 1
        type: integer
      id:
        type: integer
      productId:
        type: string
      updatedAt:
        type: string
    required:
    - baseUnit
    - baseUnitId
    - deriveUnit
    - deriveUnitId
    - factor
    - productId
    type: object
  github_com_sankangkin_di-rest-api_internal_models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      password:
        minLength: 3
        type: string
      role:
        $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Role'
      updatedAt:
        type: string
      userName:
        minLength: 3
        type: string
    required:
    - email
    - isAdmin
    - password
    - role
    - userName
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  httputil.HttpError400:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  httputil.HttpError401:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Unauthorized
        type: string
    type: object
  httputil.HttpError500:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  internal_auth.RefreshRequestDTO:
    properties:
      refreshToken:
        type: string
    type: object
  internal_auth.RefreshResponseDTO:
    properties:
      refreshToken:
        type: string
    type: object
  internal_auth.SignInRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  internal_auth.SignInResponseDTO:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      userName:
        type: string
    type: object
  internal_auth.SignUpDTO:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      userName:
        type: string
    required:
    - email
    - password
    - role
    - userName
    type: object
  internal_auth.SignUpResponseDTO:
    properties:
      AccessToken:
        type: string
      RefreshToken:
        type: string
      user:
        $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.User'
    type: object
  internal_domain_category.CreateCategoryRequestDTO:
    properties:
      categoryName:
        type: string
    type: object
  internal_domain_customer.CreateCustomerRequestDTO:
    properties:
      address:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  internal_domain_customer.UpdateCustomerRequstDTO:
    properties:
      address:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  internal_domain_inventory.IncreaseInventoryDTO:
    properties:
      inQty:
        type: integer
      outQty:
        type: integer
      productId:
        type: string
      remark:
        type: string
    type: object
  internal_domain_itemtransactions.ResquestAdjustInventoryDTO:
    properties:
      baseQty:
        type: integer
      createdAt:
        description: Timestamp of the transaction
        type: string
      derivedQty:
        type: integer
      inQty:
        description: Quantity to be added
        type: integer
      outQty:
        description: Quantity to be removed
        type: integer
      productId:
        type: string
      referenceNo:
        description: Reference number for the transaction
        type: string
      remark:
        type: string
      tranType:
        description: DEBIT or CREDIT
        type: string
      uom:
        description: Unit of Measure (e.g., EACH, KG)
        type: string
    type: object
  internal_domain_product.CreateProductRequstDTO:
    properties:
      brand:
        type: string
      buyPrice:
        minimum: 1
        type: integer
      categoryId:
        type: integer
      id:
        type: string
      isActive:
        type: boolean
      productName:
        minLength: 3
        type: string
      qtyOhHand:
        type: integer
      reorderlvl:
        minimum: 1
        type: integer
      sellPriceLevel1:
        minimum: 1
        type: integer
      sellPriceLevel2:
        minimum: 1
        type: integer
      uom:
        minLength: 3
        type: string
    required:
    - buyPrice
    - categoryId
    - productName
    - qtyOhHand
    - reorderlvl
    - sellPriceLevel1
    - sellPriceLevel2
    - uom
    type: object
  internal_domain_product.UpdateProductRequstDTO:
    properties:
      brand:
        description: QtyOnHand       int    `json:"qtyOhHand" validate:"required"`
        type: string
      buyPrice:
        minimum: 1
        type: integer
      categoryId:
        type: integer
      isActive:
        type: boolean
      productName:
        minLength: 3
        type: string
      reorderlvl:
        minimum: 1
        type: integer
      sellPriceLevel1:
        minimum: 1
        type: integer
      sellPriceLevel2:
        minimum: 1
        type: integer
      uom:
        minLength: 2
        type: string
    required:
    - buyPrice
    - categoryId
    - productName
    - reorderlvl
    - sellPriceLevel1
    - sellPriceLevel2
    - uom
    type: object
  internal_domain_purchase.PurchaseInvoiceRequestDTO:
    properties:
      discount:
        type: integer
      grandTotal:
        type: integer
      id:
        type: string
      purchaseDate:
        type: string
      purchaseDetails:
        items:
          $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.PurchaseDetail'
        type: array
      remark:
        type: string
      supplierId:
        type: integer
      total:
        type: integer
    type: object
  internal_domain_sale.SaleInvoiceRequestDTO:
    properties:
      customerId:
        type: integer
      discount:
        type: integer
      grandTotal:
        type: integer
      id:
        type: string
      remark:
        type: string
      saleDate:
        type: string
      saleDetails:
        items:
          $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.SaleDetail'
        type: array
      total:
        type: integer
    type: object
  internal_domain_supplier.CreateSupplierRequestDTO:
    properties:
      address:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  internal_domain_supplier.UpdateSupplierRequstDTO:
    properties:
      address:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
host: localhost:5555
info:
  contact:
    email: sankaungkin@gmail.com
    name: San KaungKin
  description: This is an auto-generated API docs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: REST-API with(golang fiber, google wire dependency injection)
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Data
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/internal_auth.SignInRequestDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_auth.SignInResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      summary: Login to the api with email and password
      tags:
      - Auth
  /api/auth/logout:
    post:
      description: Logout user
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      summary: Logout user
      tags:
      - Auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_auth.RefreshRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_auth.RefreshResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
      summary: Refresh access token
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register new user based on parameters
      parameters:
      - description: Signup Data
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/internal_auth.SignUpDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_auth.SignUpResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      summary: Create new user based on parameters
      tags:
      - Auth
  /api/categories:
    get:
      consumes:
      - application/json
      description: Fetch all Categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - ApiKeyAuth: []
      - Bearer  <-----------------------------------------add this in all controllers that need authentication: []
      summary: Fetch all Categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create new category based on parameters
      parameters:
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/internal_domain_category.CreateCategoryRequestDTO'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - ApiKeyAuth: []
      - Bearer  <-----------------------------------------add this in all controllers that need authentication: []
      summary: Create new category based on parameters
      tags:
      - Categories
  /api/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete individual category
      parameters:
      - description: category Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - ApiKeyAuth: []
      - Bearer  <-----------------------------------------add this in all controllers that need authentication: []
      summary: Delete individual category
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Fetch individual category by Id
      parameters:
      - description: category Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - ApiKeyAuth: []
      - Bearer  <-----------------------------------------add this in all controllers that need authentication: []
      summary: Fetch individual category by Id
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update individual category
      parameters:
      - description: category Id
        in: path
        name: id
        required: true
        type: string
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - ApiKeyAuth: []
      - Bearer  <-----------------------------------------add this in all controllers that need authentication: []
      summary: Update individual category
      tags:
      - Categories
  /api/customers:
    get:
      consumes:
      - application/json
      description: Fetch all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Customer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create new customer based on parameters
      parameters:
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/internal_domain_customer.CreateCustomerRequestDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create new customer based on parameters
      tags:
      - Customers
  /api/customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete individual customer
      parameters:
      - description: customer Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Delete individual customer
      tags:
      - Customers
    get:
      consumes:
      - application/json
      description: Fetch individual customer by Id
      parameters:
      - description: customer Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual customer by Id
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update individual customer
      parameters:
      - description: customer Id
        in: path
        name: id
        required: true
        type: string
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/internal_domain_customer.UpdateCustomerRequstDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Update individual customer
      tags:
      - Customers
  /api/inventories:
    get:
      consumes:
      - application/json
      description: Fetch all inventory records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Inventory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all inventory records
      tags:
      - Inventories
  /api/inventories/decrease:
    post:
      consumes:
      - application/json
      description: Create decrease inventory record based on parameters
      parameters:
      - description: Inventory Data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/internal_domain_inventory.IncreaseInventoryDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Inventory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create decrease inventory record based on parameters
      tags:
      - Inventories
  /api/inventories/increase:
    post:
      consumes:
      - application/json
      description: Create increase inventory record based on parameters
      parameters:
      - description: Inventory Data
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/internal_domain_inventory.IncreaseInventoryDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Inventory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create increase inventory record based on parameters
      tags:
      - Inventories
  /api/product:
    post:
      consumes:
      - application/json
      description: Create a new product with name, category, prices, and status
      parameters:
      - description: Product input data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/internal_domain_product.CreateProductRequstDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create new product
      tags:
      - Products
  /api/products:
    get:
      consumes:
      - application/json
      description: Fetch all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all products
      tags:
      - Products
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete individual product
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Delete individual product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Fetch individual product by Id
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual product by Id
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update individual product
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/internal_domain_product.UpdateProductRequstDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Update individual product
      tags:
      - Products
  /api/products/conversions/:
    get:
      consumes:
      - application/json
      description: Get unit conversions
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.UnitConversion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Get unit conversions
      tags:
      - Products
  /api/products/conversions/{id}:
    get:
      consumes:
      - application/json
      description: Get unit conversions by Id
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.UnitConversion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Get unit conversions by Id
      tags:
      - Products
  /api/products/prices/:
    get:
      consumes:
      - application/json
      description: Get all product prices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Get all product prices
      tags:
      - Products
  /api/products/prices/{id}:
    get:
      consumes:
      - application/json
      description: Fetch individual product price by Id
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual product price by Id
      tags:
      - Products
  /api/products/stocks:
    get:
      consumes:
      - application/json
      description: Get all product stocks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Get all product stocks
      tags:
      - Products
  /api/products/stocks/{id}:
    get:
      consumes:
      - application/json
      description: Get all product stocks By Id
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Get all product stocks By Id
      tags:
      - Products
  /api/purchases:
    get:
      consumes:
      - application/json
      description: Fetch all purchases
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Purchase'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all purchases
      tags:
      - Purchases
    post:
      consumes:
      - application/json
      description: Create new purchase based on parameters
      parameters:
      - description: Product Data
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/internal_domain_purchase.PurchaseInvoiceRequestDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Purchase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create new purchase based on parameters
      tags:
      - Purchases
  /api/purchases/{id}:
    get:
      consumes:
      - application/json
      description: Fetch individual purchase by Id
      parameters:
      - description: purchase Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Purchase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual purchase by Id
      tags:
      - Purchases
  /api/sales:
    get:
      consumes:
      - application/json
      description: Fetch all sales
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Sale'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all sales
      tags:
      - Sales
    post:
      consumes:
      - application/json
      description: Create new sale based on parameters
      parameters:
      - description: Product Data
        in: body
        name: sale
        required: true
        schema:
          $ref: '#/definitions/internal_domain_sale.SaleInvoiceRequestDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Sale'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create new sale based on parameters
      tags:
      - Sales
  /api/sales/{id}:
    get:
      consumes:
      - application/json
      description: Fetch individual sale by Id
      parameters:
      - description: sale Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Sale'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual sale by Id
      tags:
      - Sales
  /api/suppliers:
    get:
      consumes:
      - application/json
      description: Fetch all supplier
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Supplier'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all supplier
      tags:
      - Suppliers
    post:
      consumes:
      - application/json
      description: Create new supplier based on parameters
      parameters:
      - description: Supplier Data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/internal_domain_supplier.CreateSupplierRequestDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create new supplier based on parameters
      tags:
      - Suppliers
  /api/suppliers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete individual supplier
      parameters:
      - description: supplier Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Delete individual supplier
      tags:
      - Suppliers
    get:
      consumes:
      - application/json
      description: Fetch individual supplier by Id
      parameters:
      - description: supplier Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual supplier by Id
      tags:
      - Suppliers
    put:
      consumes:
      - application/json
      description: Update individual supplier
      parameters:
      - description: Supplier Id
        in: path
        name: id
        required: true
        type: string
      - description: Supplier Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/internal_domain_supplier.UpdateSupplierRequstDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.Supplier'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Update individual supplier
      tags:
      - Suppliers
  /api/transactions:
    get:
      consumes:
      - application/json
      description: Fetch all transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.ItemTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch all transactions
      tags:
      - Transactions
  /api/transactions/adjustment:
    post:
      consumes:
      - application/json
      description: Create
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product input data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/internal_domain_itemtransactions.ResquestAdjustInventoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.ItemTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Create adjustment transaction
      tags:
      - Transactions
  /api/transactions/by-product-type/{productId}/{tranType}:
    get:
      consumes:
      - application/json
      description: Fetch individual transaction by productId and tranType
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Transaction Type
        in: path
        name: tranType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.ItemTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual transaction by productId and tranType
      tags:
      - Transactions
  /api/transactions/by-product/{productId}:
    get:
      consumes:
      - application/json
      description: Fetch individual transaction by productId
      parameters:
      - description: product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.ItemTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual transaction by productId
      tags:
      - Transactions
  /api/transactions/by-type/{tranType}:
    get:
      consumes:
      - application/json
      description: Fetch individual transaction by protransactionType
      parameters:
      - description: transactionType
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_sankangkin_di-rest-api_internal_models.ItemTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HttpError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HttpError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HttpError500'
      security:
      - Bearer: []
      summary: Fetch individual transaction by transactionType
      tags:
      - Transactions
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
